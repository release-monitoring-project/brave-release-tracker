name: Update Brave Release JSON

on:
  schedule:
    - cron: '0 * * * *' # Runs every hour (UTC time)
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Run fetch-latest-release.sh
        run: bash fetch-latest-release.sh

      - name: Get tag from generated JSON
        id: get_tag
        run: |
          TAG=$(jq -r .tag brave_download_links.json)
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Get latest release tag from GitHub
        id: get_latest_release
        run: |
          LATEST_TAG=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' || echo "")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if new release is needed
        id: check_release
        run: |
          if [ -z "${{ steps.get_tag.outputs.tag }}" ] || [ "${{ steps.get_tag.outputs.tag }}" = "null" ]; then
            echo "Tag is null or empty. No release will be created."
            echo "release_needed=false" >> $GITHUB_OUTPUT
          elif [ "${{ steps.get_tag.outputs.tag }}" = "${{ steps.get_latest_release.outputs.latest_tag }}" ]; then
            echo "No new release needed."
            echo "release_needed=false" >> $GITHUB_OUTPUT
          else
            echo "New release needed."
            echo "release_needed=true" >> $GITHUB_OUTPUT
          fi

      - name: Create or Update Release
        if: steps.check_release.outputs.release_needed == 'true'
        uses: ncipollo/release-action@v1.14.0
        with:
          tag: ${{ steps.get_tag.outputs.tag }}
          name: Brave Release ${{ steps.get_tag.outputs.tag }}
          body: Automated release for Brave version ${{ steps.get_tag.outputs.tag }}.
          artifacts: brave_download_links.json
          artifactContentType: application/json
          allowUpdates: true
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
